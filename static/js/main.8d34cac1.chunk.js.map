{"version":3,"sources":["components/Card.jsx","components/CardList.jsx","components/SearchBox.jsx","components/Scroll.jsx","components/ErrorBoundary.js","containers/App.jsx","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","cardsArray","robots","map","robot","key","SearchBox","searchChange","onChange","type","placeholder","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","console","log","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"4NAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC5B,OACC,yBAAKC,UAAU,sDACd,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,KACpD,6BACC,4BAAKL,GACL,2BAAIC,MCIOK,EARE,SAAC,GAAgB,IAC3BC,EAD0B,EAAbC,OACOC,KAAI,SAACC,GAC9B,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAMR,GAAIA,GAAIQ,EAAMR,GAAIF,KAAMU,EAAMV,KAAMC,MAAOS,EAAMT,WAG1E,OAAO,6BAAMM,ICMCK,EAbU,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAC3B,OACC,yBAAKV,UAAU,OACd,2BACCW,SAAUD,EACVV,UAAU,mCACVY,KAAK,SACLC,YAAY,oBCHDC,EAJA,SAACC,GACf,OAAO,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAAYJ,EAAMK,WCmBjFC,EApBf,kDACC,WAAYN,GAAQ,IAAD,8BAClB,gBACKO,MAAQ,CACZC,UAAW,GAHM,EADpB,8DAQmBC,EAAOC,GACxBC,KAAKC,SAAS,CAAEJ,UAAU,MAT5B,+BAaE,OAAIG,KAAKJ,MAAMC,SACP,0DAEDG,KAAKX,MAAMK,aAhBpB,GAAmCQ,aCkDpBC,G,wDA5Cd,aAAe,IAAD,8BACb,gBAcDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAd1C,EAAKZ,MAAQ,CACZjB,OAAc,GACd2B,YAAc,IAEfG,QAAQC,IAAI,cANC,E,gEASO,IAAD,OACnBC,MAAM,8CACJC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKd,SAAS,CAAEtB,OAAQoC,S,+BAOjC,IAAD,EACwBf,KAAKJ,MAA7BjB,EADA,EACAA,OAAQ2B,EADR,EACQA,YAEVU,EAAiBrC,EAAOsC,QAAO,SAACpC,GAAD,OAAWA,EAAMV,KAAK+C,cAAcC,SAASb,EAAYY,kBAE9F,OAAsB,IAAlBvC,EAAOyC,OACH,uCAIN,6BACC,yBAAK9C,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUzB,OAAQqC,Y,GApCRd,c,YCKEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLW,QAAQX,MAAMA,EAAMsC,a","file":"static/js/main.8d34cac1.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n\treturn (\n\t\t<div className=\"tc bg-light-blue dib br4 pa3 ma2 grow bw2 shadow-5\">\n\t\t\t<img src={`https://robohash.org/${id}?200x200`} alt=\"\" />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Card;\n","import React from 'react';\n\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\tconst cardsArray = robots.map((robot) => {\n\t\treturn <Card key={robot.id} id={robot.id} name={robot.name} email={robot.email} />;\n\t});\n\n\treturn <div>{cardsArray}</div>;\n};\n\nexport default CardList;\n","import React from 'react';\n\nexport const SearchBox = ({ searchChange }) => {\n\treturn (\n\t\t<div className=\"pa2\">\n\t\t\t<input\n\t\t\t\tonChange={searchChange}\n\t\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue\"\n\t\t\t\ttype=\"search\"\n\t\t\t\tplaceholder=\"search robots\"\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn <div style={{ overflowY: 'scroll', border: '5px solid black', height: '800px' }}>{props.children}</div>;\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nexport class ErrorBoundary extends Component {\n\tconstructor(props) {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\thasError : false\n\t\t};\n\t}\n\n\tcomponentDidCatch(error, info) {\n\t\tthis.setState({ hasError: true });\n\t}\n\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1>Oops. Something went wrong</h1>;\n\t\t}\n\t\treturn this.props.children;\n\t}\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './app.css';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\trobots      : [],\n\t\t\tsearchField : ''\n\t\t};\n\t\tconsole.log('constuctor');\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then((response) => response.json())\n\t\t\t.then((users) => this.setState({ robots: users }));\n\t}\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({ searchField: event.target.value });\n\t};\n\n\trender() {\n\t\tconst { robots, searchField } = this.state;\n\n\t\tconst filteredRobots = robots.filter((robot) => robot.name.toLowerCase().includes(searchField.toLowerCase()));\n\n\t\tif (robots.length === 0) {\n\t\t\treturn <h1>Loading</h1>;\n\t\t}\n\t\telse\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<div className=\"tc\">\n\t\t\t\t\t\t<h1 className=\"f1\">RoboFriends</h1>\n\t\t\t\t\t\t<SearchBox searchChange={this.onSearchChange} />\n\t\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t\t\t</Scroll>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './containers/App';\n\nimport 'tachyons';\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}